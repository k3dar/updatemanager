#! /usr/bin/python3

import os
import sys
sys.path.append('/usr/lib/solydxk/updatemanager')
import pwd
import gettext
import argparse
from gi.repository import Gtk, Gdk
from os.path import join, abspath, dirname, exists
from umglobal import UmGlobal
from dialogs import MessageDialog, QuestionDialog

# i18n: http://docs.python.org/2/library/gettext.html
gettext.install("updatemanager", "/usr/share/locale")
_ = gettext.gettext

title = _("Update Manager")
scriptDir = join(abspath(dirname(__file__)), "../lib/solydxk/updatemanager")

# Clear update history
def clearUpHistory():
    histFile = join(scriptDir, "files/updatemanager.hist")
    resetLine = None
    if exists(histFile):
        with open(histFile, 'r') as f:
            for line in reversed(f.readlines()):
                if "upd=" in line:
                    resetLine = "upd=2000.01.01\n"
                    break
        if resetLine is not None:
            print(("> Clear update history file"))
            with open(histFile, 'w') as f:
                f.write(resetLine)

def isRunningLive():
    liveDirs = ['/live', '/lib/live/mount', '/rofs']
    for ld in liveDirs:
        if os.path.exists(ld):
            return True
    return False

# Get the launcher if not root
launcher = ""
if os.geteuid() > 0:
    msg = _('Please enter your password')
    launcher = "gksudo --message \"<b>%s</b>\"" % msg
    if os.path.exists('/usr/bin/kdesudo'):
        launcher = "kdesudo -n -i 'update-manager' -d --comment \"<b>%s</b>\"" % msg

# Handle arguments
parser = argparse.ArgumentParser(description='SolydXK Update Manager')
parser.add_argument('-c','--conf', action="store_true", help='Re-create configuration file')
parser.add_argument('-p','--pref', action="store_true", help='Show the preference window')
parser.add_argument('-q','--quick', action="store_true", help='Quick upgrade')
parser.add_argument('-t','--tray', action="store_true", help='Load the tray icon only')
parser.add_argument('-f','--force', action="store_true", help='Force start in a live environment')
parser.add_argument('-u','--clear-upd', action="store_true", help='Clear Update Pack history')
parser.add_argument('-r','--reload', action="store_true", help='')

args = parser.parse_args()

arguments = []
if args.conf:
    conf = "/usr/lib/solydxk/updatemanager/files/updatemanager.conf"
    if exists(conf):
        cmd = "rm -f {}".format(conf)
        if launcher != "":
            cmd = "{0} '{1}'".format(launcher, cmd)
        print(cmd)
        os.system(cmd)

if args.reload:
    arguments.append("-r")
if args.clear_upd:
    clearUpHistory()

umglobal = UmGlobal()
if args.quick:
    # Only one dialog allowed
    pids = umglobal.getScriptPids("/usr/bin/updatemanager -q")
    if len(pids) > 1:
        sys.exit(4)

    builder = Gtk.Builder()
    builder.add_from_file(join(scriptDir, '../../../share/solydxk/updatemanager/updatemanagerqu.glade'))
    go = builder.get_object
    dialogQu = go("dialogQU")
    go("lblQU").set_label(_("Quick update silently updates your system."))
    go("btnQU").set_label(_("Quick update"))
    go("btnUM").set_label(_("Update Manager"))
    ret = dialogQu.run()
    dialogQu.hide()
    if ret == 0:
        # run quick update
        arguments.append("-q")
        while Gtk.events_pending():
            Gtk.main_iteration()
    elif ret == 1:
        # run update manager
        while Gtk.events_pending():
            Gtk.main_iteration()
    else:
        # cancelled
        sys.exit(5)

# Finish arguments string
arguments.append("&")

msg = _("Update Manager cannot be started in a live environment\n"
        "You can use the --force argument to start UM in a live environment")

if args.pref:
    if isRunningLive() and not args.force:
        MessageDialog(title, msg, Gtk.MessageType.WARNING)
    else:
        if umglobal.isSrciptRunning("updatemanagerpref.py"):
            print(("updatemanagerpref.py already running - exiting"))
        else:
            cmd = "python3 {0}/updatemanagerpref.py {1}".format(scriptDir, " ".join(arguments))
            if launcher != "":
                cmd = "{0} '{1}'".format(launcher, cmd)
            print(cmd)
            os.system(cmd)
else:
    if not isRunningLive() and not args.force:
        if umglobal.isSrciptRunning("updatemanagertray.py"):
            print(("updatemanagertray.py already running - exiting"))
        else:
            cmd = "python3 {0}/updatemanagertray.py {1}".format(scriptDir, " ".join(arguments))
            print(cmd)
            os.system(cmd)
    if not args.tray:
        if isRunningLive() and not args.force:
            MessageDialog(title, msg, Gtk.MessageType.WARNING)
        else:
            if umglobal.isSrciptRunning("updatemanager.py"):
                print(("updatemanager.py already running - exiting"))
            else:
                cmd = "python3 {0}/updatemanager.py {1}".format(scriptDir, " ".join(arguments))
                if launcher != "":
                    cmd = "{0} '{1}'".format(launcher, cmd)
                print(cmd)
                os.system(cmd)
